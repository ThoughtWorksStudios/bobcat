{
  package main

  type node struct {
    kind     string
    name     string
    value    interface{}
    args     []node
    children []node
  }

  func toNodeSlice(v interface{}) []node {
    vars := v.([]interface{})
    nodes := make([]node, 0)
    for _, val := range vars {
      nodes = append(nodes, val.(node))
    }
      return nodes
  }

  func parseArgNodes(args interface{}) []node {
    if args == nil {
      return []node{}
    }
    return args.(node).value.([]node)
  }
}

Script "entire spec" = prog:Def* EOF {
  return node {
    kind: "root",
    children: toNodeSlice(prog),
  }, nil
}

Def "entity definition" = _ "def" _ entity:Identifier _ '{' body:FieldDecl* '}' _ {
  return node{
    kind: "entity",
    name: entity.(node).value.(string),
    children: toNodeSlice(body),
  }, nil
}

FieldDecl "field declaration" = _ name:Identifier _ kind:Type _ args:Args? _ ';' _ {
  return node {
    name: name.(node).value.(string),
    kind: "field",
    value: kind.(node).value.(string),
    args: parseArgNodes(args),
  }, nil
}

Args "arguments" = '(' _ args:(Range / Date / Int / Identifier)* _ ')' {
  return node {
    kind: "args",
    value: toNodeSlice(args),
  }, nil
}

Range "range" = min:(Date / Int) _ ':' _ max:(Date / Int) {
  if reflect.TypeOf(min.(node).value) != reflect.TypeOf(max.(node).value) {
    return node{}, errors.New("min and max boundaries must be of the some type")
  }
  minNode := node {
    kind: "min",
    value: min.(node).value,
  }
  maxNode := node {
    kind: "max",
    value: max.(node).value,
  }
  rangeNode := node {
    kind: "range",
    args: []node{minNode, maxNode},
  }
  //TODO: figure out how to get this to work; also, added other conditionals
  // e.g. min <= max, etc
  return rangeNode, nil
}

Identifier "variable name" = [a-zA-Z_][a-zA-Z0-9_]* {
  return node {
    kind: "variable",
    value: string(c.text),
  }, nil
}

Type "built-in types" = ("integer" / "decimal" / "string" / "date") {
  return node {
    kind: "type",
    value: string(c.text),
  }, nil
}

Date = ([0-9][0-9][0-9][0-9] '-' [0-9][0-9] '-' [0-9][0-9]) {
  return node {
    kind: "date",
    value: string(c.text),
  }, nil
}

Int = [0-9]+ {
  i, _ := strconv.Atoi(string(c.text))
  return node {
    kind: "numeric",
    value: i,
  }, nil
}

_ "whitespace" = [ \t\r\n]*

EOF = !.
