import "users.lang"

Profile: {
  name      dict("full_names"),
  addresses dict("full_address")[1, 3],
  gender    dict("genders"),
  dob       date(1970-01-01, 1999-12-31),
  email_confirmed bool,
}

CatalogItem: {
  title dict("words"),
  sku   string(5),
  price decimal(1.0, 30.00)
}

CartItem:CatalogItem {
  quantity integer(1,3)
}

Cart: {
  items CartItem[0,10],
  total decimal # TODO: this should be a calculated item based on CartItems price x quantity + tax
}

# Currently it would be difficult to implement a social network,
# i.e. a customer's "friends". Nesting a customer within a customer as
# a "friend" field seems somewhat unnatural, not to mention would blow
# the stack with infinite nesting unless the nested Customer had their
# friend set to null via override. Definitely a shortcoming in the language.
Customer:User {
  customer_since date,
  profile        Profile,
  cart           Cart
}


# Generate statements
# TODO: might be awkward to control over specific test user's carts with the current language capabilities
# -- should explore more fine-grained relationship handling & get feedback on this
generate (2, Admin)
generate (2, Customer {cart null}) # new users don't have a cart yet
generate (10, Customer)
