{
  package dsl

  type Node struct {
    Kind     string
    Name     string
    Value    interface{}
    Args     []Node
    Children []Node
  }

  func toNodeSlice(v interface{}) []Node {
    vars := v.([]interface{})
    Nodes := make([]Node, 0)
    for _, val := range vars {
      Nodes = append(Nodes, val.(Node))
    }
      return Nodes
  }

  func parseArgNodes(Args interface{}) []Node {
    if Args == nil {
      return []Node{}
    }
    return Args.(Node).Value.([]Node)
  }
}

Script "entire spec" = prog:Statement* EOF {
  return Node {
    Kind: "root",
    Children: toNodeSlice(prog),
  }, nil
}

Statement = statement:(EntityDef / EntityGen) {
  return statement, nil
}

EntityGen "entity generation" = _ "generate" _ Name:Identifier _ Args:Args _ {
  return Node {
    Kind: "generation",
    Name: Name.(Node).Value.(string),
    Args: parseArgNodes(Args),
  }, nil
}

EntityDef "entity definition" = _ "def" _ Name:Identifier _ '{' body:FieldDecl* '}' _ {
  return Node {
    Kind: "definition",
    Name: Name.(Node).Value.(string),
    Children: toNodeSlice(body),
  }, nil
}

FieldDecl "field declaration" = _ Name:Identifier _ Kind:Type Args:Args? _ ';' _ {
  return Node {
    Name: Name.(Node).Value.(string),
    Kind: "field",
    Value: Kind.(Node).Value.(string),
    Args: parseArgNodes(Args),
  }, nil
}

Args "arguments" = '(' _ Args:(Range / Date / Number / Identifier / String)* _ ')' {
  return Node {
    Kind: "Args",
    Value: toNodeSlice(Args),
  }, nil
}

Range "range" = min:(Date / Number) _ ':' _ max:(Date / Number) {
  if reflect.TypeOf(min.(Node).Value) != reflect.TypeOf(max.(Node).Value) {
    return Node{}, errors.New("min and max boundaries must be of the same type")
  }
  minNode := Node {
    Kind: "min",
    Value: min.(Node).Value,
  }
  maxNode := Node {
    Kind: "max",
    Value: max.(Node).Value,
  }
  rangeNode := Node {
    Kind: "range",
    Args: []Node{minNode, maxNode},
  }
  //TODO: figure out how to get this to work; also, added other conditionals
  // e.g. min <= max, etc
  return rangeNode, nil
}

Identifier "variable Name" = [a-zA-Z_][a-zA-Z0-9_]* {
  return Node {
    Kind: "variable",
    Value: string(c.text),
  }, nil
}

Type "built-in types" = ("integer" / "decimal" / "string" / "date" / "dict") {
  return Node {
    Kind: "type",
    Value: string(c.text),
  }, nil
}

Date = ([0-9][0-9][0-9][0-9] '-' [0-9][0-9] '-' [0-9][0-9]) {
  return Node {
    Kind: "date",
    Value: string(c.text),
  }, nil
}

Number = [0-9]+ ('.'? [0-9]+)* {
  return Node {
    Kind: "numeric",
    Value: string(c.text),
  }, nil
}

String = '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
  i, _ := strconv.Unquote(string(c.text))
  return Node {
    Kind: "string",
    Value: i,
  }, nil
}

EscapedChar = [\x00-\x1f"\\]

EscapeSequence = SingleCharEscape / UnicodeEscape

SingleCharEscape = ["\\/bfnrt]

UnicodeEscape = 'u' HexDigit HexDigit HexDigit HexDigit

HexDigit = [0-9a-f]i

_ "whitespace" = [ \t\r\n]*

EOF = !.
