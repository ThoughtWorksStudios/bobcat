{
  package dsl

  import (
    "regexp"
    "strconv"
    . "github.com/ThoughtWorksStudios/bobcat/common"
  )

  func invalid(format string, tokens ...interface{}) error {
    return fmt.Errorf(format, tokens...)
  }
}

Script = _ prog:StatementList? _ EOF {
  Msg("rule Script")
  return RootNode(ref(c), prog), nil
}

StatementList = first:StatementOrExpression rest:(_ StatementOrExpression)* {
  Msg("rule StatementList %q", string(c.text))
  if first == nil {
    return nil, nil
  }

  return DelimitedNodeSlice(first, rest), nil
} / !StatementOrExpression .+ { return nil, invalid("Don't know how to evaluate %q", string(c.text)) }

Statement = ImportStatement / PrimaryKeyStatement

StatementOrExpression = Statement / Expression

Expression = first:(PrimaryExpression) rest:(SPACES* ("," / ";" / EOL) _ PrimaryExpression)* _ {
  Msg("rule Expression %q", string(c.text))
  if tail, ok := rest.([]interface{}); nil != first && ok && len(tail) > 0 {
    return SequentialNode(ref(c), DelimitedNodeSlice(first, rest)), nil
  }

  if nil == first {
    return nil, nil
  }

  return first, nil
} / Distribution { return nil, invalid("distributions can only be used as entity fields") }

PrimaryExpression = !Statement expr:(AssignmentExpression / ValueExpression / FailOnIllegalIdentifier) { return expr, nil }

ImportStatement = ImportToken _ path:StringLiteral {
  Msg("rule ImportStatement")

  pathNode, _ := path.(*Node)

  if fspath := strings.TrimSpace(pathNode.ValStr()); fspath == "" {
    return nil, invalid("import statement requires a resolvable path")
  } else {
    return ImportNode(ref(c), fspath), nil
  }
} / FailOnBadImport

GenerateExpression = GenerateToken _ args:Arguments {
  Msg("rule GenerateExpression %q", string(c.text))

  if nil == args {
    return nil, nil
  }

  return GenNode(ref(c), args), nil
} / FailOnMissingGenerateArguments

VariableExpression = VarToken _ first:VariableDeclaration rest:(_ "," _ VariableDeclaration)* {
  Msg("rule VariableExpression %q", string(c.text))
  if tail, ok := rest.([]interface{}); nil != first && ok && len(tail) > 0 {
    return SequentialNode(ref(c), DelimitedNodeSlice(first, rest)), nil
  }

  if nil == first {
    return nil, nil
  }

  return first, nil
}

VariableDeclaration = id:ValidatedIdentifier _ init:Initializer? {
  Msg("rule VariableDeclaration %q", string(c.text))
  if nil == id {
    return nil, nil
  }
  return VariableNode(ref(c), id, init), nil
}

Initializer = ASSIGN_OP _ value:PrimaryExpression {
  Msg("rule Initializer %q", string(c.text))
  return value, nil
}

AssignmentExpression = left:LeftHandSideExpression _ ASSIGN_OP _ right:PrimaryExpression {
  Msg("rule AssignmentExpression %q", string(c.text))

  if nil == left {
    return nil, invalid("Invalid left-hand side in assignment")
  }

  return AssignNode(ref(c), left, right), nil
} / FailOnMissingRightHandAssignment

// synonym for Identifier, but may change if we decided to support member assignments, e.g. A.foo = bar, or arr[0] = baz
LeftHandSideExpression = Identifier

ValidatedIdentifier = Identifier / FailOnIllegalIdentifier

// just an alias for now. but might be expanded if we decide support binary/calculated operations (e.g. !, +, -, *, /)
ValueExpression = BinaryExpression

BinaryExpression = head:UnaryExpression tail:(_ ArithmeticOperator _ UnaryExpression)* {
  Msg("BinaryExpression: %v", string(c.text))
  if nil == head || nil == tail {
    return nil, nil
  }
  return BinaryNode(ref(c), head, tail), nil
}

UnaryExpression
  = Literal
  / CollectionLiteral
  / VariableExpression
  / LambdaExpression
  / CallExpression
  / EntityExpression
  / Builtin
  / ValidatedIdentifier
  / AtomicExpression

AtomicExpression = "(" _ expr:Expression _ ")" { return AtomicNode(ref(c), expr), nil }

LambdaExpression = LambdaToken _ name:ValidatedIdentifier? _ params:BoundParameters _ body:LambdaBody {
  Msg("rule LambdaExpression %q", string(c.text))
  if nil == params || nil == body {
    return nil, nil
  }

  return LambdaNode(ref(c), name, params, body), nil
}

LambdaBody = '{' _ body:Expression* _ '}' { Msg("rule LambdaBody %q", string(c.text)); return body, nil } / FailOnUnterminatedLambdaBody

CallExpression
  = GenerateExpression
  / callable:(Builtin / !EntityExpression id:ValidatedIdentifier { return id, nil } / AtomicExpression) _ args:Arguments {
    Msg("rule CallExpression %q", string(c.text))
    if nil == callable || nil == args {
      return nil, nil
    }

    return CallNode(ref(c), callable, args), nil
  }

BoundParameters = '(' _ body:BoundParamBody? _ ')' {
  Msg("rule BoundParameters %q", string(c.text))

  return DefaultToEmptySlice(body), nil
} / FailOnUnterminatedBoundParams

BoundParamBody = first:ValidatedIdentifier rest:(_ ',' _ ValidatedIdentifier)* {
  Msg("rule BoundParamBody %q", string(c.text))

  if first == nil {
    return nil, nil
  }

  return DelimitedNodeSlice(first, rest), nil
} / FailOnUndelimitedBoundParams

EntityExpression = EntityLiteral / EntityDeclaration

EntityDeclaration = EntityToken _ name:ValidatedIdentifier _ EXTEND_OP _ extends:ValidatedIdentifier _ body:EntityBody {
  Msg("rule EntityDeclaration + extends %q", string(c.text))

  if nil == name || nil == extends || nil == body {
    return nil, nil
  }
  return EntityNode(ref(c), name, extends, body), nil
} / EntityToken _ name:ValidatedIdentifier _ body:EntityBody {
  Msg("rule EntityDeclaration %q", string(c.text))

  if nil == name || nil == body {
    return nil, nil
  }
  return EntityNode(ref(c), name, nil, body), nil
}

EntityLiteral = EntityToken _ body:EntityBody {
  Msg("rule EntityLiteral %q", string(c.text))

  if nil == body {
    return nil, nil
  }
  return EntityNode(ref(c), nil, nil, body), nil
} / extends:ValidatedIdentifier _ EXTEND_OP _ body:EntityBody {
  Msg("rule EntityLiteral + extends %q", string(c.text))

  if nil == extends || nil == body {
    return nil, nil
  }
  return EntityNode(ref(c), nil, extends, body), nil
}

PrimaryKeyStatement = PrimaryKeyToken _ "(" _ ident:PrimaryExpression _ "," _ kind:Builtin _ ")" {
  Msg("rule PrimaryKeyStatement %q", string(c.text))
  if nil == ident || nil == kind {
    return nil, nil
  }

  switch kind.(*Node).Name {
    case SERIAL_TYPE, UID_TYPE:
      return PkNode(ref(c), ident, kind), nil
    default:
      return nil, invalid("Primary key may only be of type `%s` or `%s`.", SERIAL_TYPE, UID_TYPE)
  }
}

EntityBody = '{' _ modifier:PrimaryKeyStatement? _ fieldset:FieldSet? _ '}' {
  Msg("rule EntityBody modifier: %v, fieldset: %v", modifier, fieldset)

  return EntityBodyNode(ref(c), modifier, fieldset), nil
} / FailOnUnterminatedEntity

FieldSet = FailOnUndelimitedFields / first:FieldDecl rest:(_ ',' _ FieldDecl)* (_ ',')? {
  Msg("rule FieldSet first: %v, rest: %v", first, rest)

  if first == nil {
    return nil, nil
  }

  return FieldSetNode(ref(c), DelimitedNodeSlice(first, rest)), nil
}

FieldDecl = DistributionField / ExpressionField / FailOnMissingFieldType

DistributionField = name:ValidatedIdentifier _ ':' _ dist:Distribution _ {
  Msg("rule DistributionField")
  if nil == name || nil == dist {
    return nil, nil
  }

  return FieldNode(ref(c), name, dist, nil), nil
}

ExpressionField = name:ValidatedIdentifier _ ':' _ expr:PrimaryExpression _ count:CountRange? _ {
  Msg("rule ExpressionField %q name: %v => expr: %v", string(c.text), name, expr)

  if name == nil || expr == nil {
    return nil, nil
  }

  rng, _ := count.(*Node)
  return FieldNode(ref(c), name, expr, rng), nil
}

CountRange = '<' _ countRange:(Range / NumberLiteral)? _ '>' { // TODO: accept Expression
  Msg("rule CountRange")

  if nil == countRange {
    lower := IntLiteralNode(ref(c), 0)
    upper := IntLiteralNode(ref(c), 0)
    return RangeNode(ref(c), lower, upper), nil
  }

  return countRange, nil
} / FailOnUnterminatedCountRange

Range = min:NumberLiteral ".." max:NumberLiteral {
  Msg("rule Range")

  lower, _ := min.(*Node)
  upper, _ := max.(*Node)

  if (!lower.Is("literal-int") && !lower.Is("identifier")) || (!upper.Is("literal-int") && !upper.Is("identifier")) {
    return nil, fmt.Errorf("Range boundaries must be integers")
  }

  return RangeNode(ref(c), lower, upper), nil
}

Arguments = '(' _ body:ArgumentsBody? _ ')' {
  Msg("rule Arguments %q", string(c.text))

  return DefaultToEmptySlice(body), nil
} / FailOnUnterminatedArguments

ArgumentsBody
   = FailOnDistributionAsArgument
   / first:PrimaryExpression rest:(_ ',' _ PrimaryExpression)* {
    Msg("rule ArgumentsBody %q", string(c.text))

    if first == nil {
      return nil, nil
    }

    return DelimitedNodeSlice(first, rest), nil
  } / FailOnUndelimitedArgs

AssociativeArgument
  = FailOnDistributionAsArgument
  / key:PrimaryExpression _ ASSOCIATE_OP _ value:PrimaryExpression _ {
    if nil == key || nil == value {
      return nil, nil
    }

    return AssociativeArgumentNode(ref(c), key, value), nil
  }

Literal = DateTimeLiteral / NumberLiteral / BoolLiteral / StringLiteral / NullLiteral

Identifier = !ReservedWord (IdentifierStart IdentifierPart*) {
  val := string(c.text)
  Msg("rule Identifier %q", val)

  return IdNode(ref(c), val), nil
}

Distribution = fn:DistributionNormal _ DISTRIBUTE_OP _ '[' _ bounds:ArgumentsBody (_ ',')? _ ']' {
  Msg("rule Distribution %q", string(c.text))
  if nil == bounds {
    return nil, nil
  }
  return DistributionNode(ref(c), fn.(string), bounds), nil
} / fn:DistributionWeighted _ DISTRIBUTE_OP _ '[' _ first:AssociativeArgument rest:(_ ',' _ AssociativeArgument)* (_ ',')? _ ']' {
  Msg("rule Distribution %q", string(c.text))
  if nil == first {
    return nil, nil
  }
  return DistributionNode(ref(c), fn.(string), DelimitedNodeSlice(first, rest)), nil
} / FailOnUnterminatedDistribution / FailOnUnknownDistribution

Builtin = FieldTypes {
  Msg("rule Builtin %q", string(c.text))

  return BuiltinNode(ref(c), string(c.text)), nil
}

CollectionLiteral = "[" _ body:ArgumentsBody? _ "]" {
  Msg("rule CollectionLiteral %q", string(c.text))

  return CollectionLiteralNode(ref(c), body), nil
} / FailOnUnterminatedCollection

DateTimeLiteral = date:IsoDate localTime:LocalTimePart? {
  Msg("rule DateTimeLiteral")

  if dateTime, err := assembleTime(date, localTime); err == nil {
    return DateLiteralNode(ref(c), dateTime), nil
  } else {
    return nil, err
  }
} / FailOnMissingDate

NumberLiteral = ('-'? INT ('.' DIGIT+)? ) !(Identifier / DIGIT / ReservedWord) {
  Msg("rule NumberLiteral %q", string(c.text))

  if s := string(c.text); strings.ContainsAny(s, ".") {
    if val, er := strconv.ParseFloat(s, 64); er == nil {
      return FloatLiteralNode(ref(c), val), nil
    } else {
      return nil, er
    }
  } else {
    if val, er := strconv.ParseInt(s, 10, 64); er == nil {
      return IntLiteralNode(ref(c), val), nil
    } else {
      return nil, er
    }
  }
} / FailOnOctal

BoolLiteral = val:BoolToken {
  Msg("rule BoolLiteral")

  return BoolLiteralNode(ref(c), val.(bool)), nil
}

NullLiteral = NullToken {
  Msg("rule NullLiteral")

  return NullLiteralNode(ref(c)), nil
}

StringLiteral = '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
  Msg("rule StringLiteral")
  if val, er := strconv.Unquote(string(c.text)); er == nil {
    return StrLiteralNode(ref(c), val), nil
  } else {
    return nil, er
  }
}

/**
 *  888888  dP"Yb  88  dP 888888 88b 88 .dP"Y8        dP      dP"Yb  88""Yb .dP"Y8
 *    88   dP   Yb 88odP  88__   88Yb88 `Ybo."       dP      dP   Yb 88__dP `Ybo."
 *    88   Yb   dP 88"Yb  88""   88 Y88 o.`Y8b      dP       Yb   dP 88"""  o.`Y8b
 *    88    YbodP  88  Yb 888888 88  Y8 8bodP'     dP         YbodP  88     8bodP'
 */

ReservedWord
  = Keyword
  / FieldTypes
  / NullToken
  / BoolToken

Keyword
  = ImportToken
  / GenerateToken
  / EntityToken
  / DistributionTypes
  / VarToken
  / LambdaToken
  / PrimaryKeyToken

ASSIGN_OP = "=" !"="
EXTEND_OP = "<<"
ASSOCIATE_OP = "=>"
DISTRIBUTE_OP = "~"

ImportToken       = "import" !IdentifierPart
EntityToken       = "entity" !IdentifierPart
VarToken          = "let" !IdentifierPart
GenerateToken     = "generate" !IdentifierPart
LambdaToken       = "lambda" !IdentifierPart
BoolToken         = TrueToken / FalseToken
NullToken         = "null" !IdentifierPart
TrueToken         = "true" !IdentifierPart { return true, nil }
FalseToken        = "false" !IdentifierPart { return false, nil }
DistributionTypes = DistributionNormal / DistributionWeighted


PrimaryKeyToken   = "pk" !IdentifierPart
FieldTypes    = "$int" / "$float" / "$str" / "$date" / "$dict" / "$bool" / "$enum" / "$incr" / "$uid" / "$uniqint"

DistributionNormal = "*normal" !IdentifierPart { return string(c.text), nil }
DistributionWeighted = ("*weight" / "*percent") !IdentifierPart { return string(c.text), nil }

ArithmeticOperator
  = AdditiveOperator !"="
  / MultiplicativeOperator !"="

AdditiveOperator = "+" / "-"
MultiplicativeOperator = "*" / "/"

/**
 *  88     888888 Yb  dP 88  dP""b8    db    88         88""Yb 88 888888 .dP"Y8
 *  88     88__    YbdP  88 dP   `"   dPYb   88         88__dP 88   88   `Ybo."
 *  88  .o 88""    dPYb  88 Yb       dP__Yb  88  .o     88""Yb 88   88   o.`Y8b
 *  88ood8 888888 dP  Yb 88  YboodP dP""""Yb 88ood8     88oodP 88   88   8bodP'
 */

IdentifierStart = [a-zA-Z_]
IdentifierPart  = [a-zA-Z0-9_]

IsoDate  = DIGIT DIGIT DIGIT DIGIT '-' DIGIT DIGIT '-' DIGIT DIGIT { return string(c.text), nil }
TimePart = 'T'i DIGIT DIGIT ':' DIGIT DIGIT ':' DIGIT DIGIT { return strings.ToUpper(string(c.text)), nil }
ZonePart = 'Z'i { return "Z", nil } / [+-] DIGIT DIGIT ':'? DIGIT DIGIT { return strings.Replace(string(c.text), ":", "", -1), nil }

LocalTimePart = ts:TimePart zone:ZonePart? {
  Msg("rule LocalTimePart")

  if zone == nil {
    return []string{ts.(string)}, nil
  } else {
    return []string{ts.(string), zone.(string)}, nil
  }
}

EscapedChar = [\x00-\x1f"\\]

EscapeSequence = SingleCharEscape / UnicodeEscape

SingleCharEscape = ["\\/bfnrt]

UnicodeEscape = 'u' HEXDIG HEXDIG HEXDIG HEXDIG

INT = '0' / NON_ZERO DIGIT*

NON_ZERO = [1-9]

DIGIT = [0-9]

HEXDIG = [0-9a-f]i

/**
 *  88 88b 88 Yb    dP    db    88     88 8888b.      88""Yb 88   88 88     888888 .dP"Y8
 *  88 88Yb88  Yb  dP    dPYb   88     88  8I  Yb     88__dP 88   88 88     88__   `Ybo."
 *  88 88 Y88   YbdP    dP__Yb  88  .o 88  8I  dY     88"Yb  Y8   8P 88  .o 88""   o.`Y8b
 *  88 88  Y8    YP    dP""""Yb 88ood8 88 8888Y"      88  Yb `YbodP' 88ood8 888888 8bodP'
 */

FailOnUnterminatedDistribution = DistributionTypes _ DISTRIBUTE_OP _ '[' _ (ArgumentsBody / AssociativeArgument)? (_ ',')? _ (!']' / EOF) { return nil, invalid("Unterminated distribution (missing closing bracket)") }
FailOnUnknownDistribution = fn:('*' IdentifierPart+ { return string(c.text), nil }) _ DISTRIBUTE_OP _ '[' { return nil, invalid("Unknown distribution %q", fn.(string)) }
FailOnDistributionAsArgument = (Distribution / (Distribution / PrimaryExpression) _ ASSOCIATE_OP _ Distribution) { return nil, invalid("Distributions cannot be used as arguments") }
FailOnBadImport = ImportToken _ [^ \t\r\n]* { return nil, invalid("Import statement requires a path") }
FailOnOctal = "\\0" DIGIT+ { return Node{}, invalid("Octal sequences are not supported") }
FailOnUnterminatedLambdaBody = '{' _ Expression* _ ([^}] / EOF) { return nil, invalid("Unterminated lambda body (missing closing curly brace) %q", string(c.text)) }
FailOnUnterminatedEntity = '{' _ PrimaryKeyStatement? _ FieldSet? _ ([^}] / EOF) { return nil, invalid("Unterminated entity expression (missing closing curly brace)") }
FailOnUndelimitedFields = (Elision _ FieldDecl / FieldDecl _ Elision / FieldDecl _ FieldDecl) { return nil, invalid("Multiple field declarations must be delimited with a comma") }
FailOnUnterminatedCountRange = '<' _ Range? _ ([^>] / EOF) { return nil, invalid("Unterminated countRange list (missing closing angled bracket)") }
FailOnUnterminatedArguments = '(' _ ArgumentsBody? _ ([^,)] / EOF) { return nil, invalid("Unterminated argument list (missing closing parenthesis)") }
FailOnUnterminatedBoundParams = '(' _ BoundParamBody? _ ([^,)] / EOF) { return nil, invalid("Unterminated argument list (missing closing parenthesis)") }
FailOnUndelimitedArgs = PrimaryExpression ((_ / _ [^,})] _) PrimaryExpression)+ { return nil, invalid("Multiple arguments must be delimited with a comma") }
FailOnUndelimitedBoundParams = Identifier ((_ / _ [^,})] _) Identifier)+ { return nil, invalid("Multiple arguments must be delimited with a comma") }
FailOnIllegalIdentifier = !ReservedWord ((DIGIT / SPECIAL_CHAR) (IdentifierPart / [@$?~`"'])*) {
  Msg("rule FailOnIllegalIdentifier %q", string(c.text))
  return nil, invalid("Illegal identifier %q; identifiers start with a letter or underscore, followed by zero or more letters, underscores, and numbers", string(c.text))
} / ReservedWord !(_ Identifier) {
  Msg("rule FailOnIllegalIdentifier %q", string(c.text))
  return nil, invalid("Illegal identifier %q; reserved words cannot be used as identifiers", string(c.text))
}
FailOnUnterminatedCollection = '[' _ ArgumentsBody? _ (!'[' / EOF) { return nil, invalid("Unterminated colleection (missing closing bracket)")}
FailOnMissingDate = LocalTimePart { return Node{}, invalid("Must include ISO-8601 (YYYY-MM-DD) date as part of timestamp") }
FailOnMissingGenerateArguments = GenerateToken _ !Arguments Expression { return nil, invalid("`generate` statement %q requires arguments `(count, entity)`", string(c.text)) }
FailOnMissingFieldType = id:Identifier _ ':' _ { return nil, invalid("Missing field type for field declaration %q", id.(*Node).ValStr()) }
FailOnMissingRightHandAssignment = leftHand:LeftHandSideExpression _ ASSIGN_OP _ !Expression .* {
  Msg("rule FailOnMissingRightHandAssignment")

  if leftHand == nil {
    return nil, nil // bad identifier
  }

  return nil, invalid("Missing right-hand of assignment expression %q", string(c.text))
}

SPECIAL_CHAR = [@$?~`"']
Elision = "," (_ "," _)+

/**
 *  .dP"Y8 88  dP 88 88""Yb 88""Yb 888888 8888b.
 *  `Ybo." 88odP  88 88__dP 88__dP 88__    8I  Yb
 *  o.`Y8b 88"Yb  88 88"""  88"""  88""    8I  dY
 *  8bodP' 88  Yb 88 88     88     888888 8888Y"
 */

Comment = '#' (!EOL .)* (EOL / EOF)

BLANK "whitespace" = SPACES / EOL

SPACES = [ \t]

_ "ignored" = (BLANK / Comment)*

EOL = [\n\r]

EOF = !.
