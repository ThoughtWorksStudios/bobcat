{
  package dsl

  import "regexp"

  func invalid(format string, tokens ...interface{}) error {
    return fmt.Errorf(format, tokens...)
  }

  func dummy(text []byte) Node {
    return Node{Value: string(text)}
  }
}

Script = prog:Statement* EOF {
  return rootNode(c, prog)
} / .* EOF { return nil, invalid("Don't know how to evaluate %q", string(c.text))}

Statement = statement:(ImportStatement / GenerateExpr / EntityExpr / Comment) {
  return statement, nil
}

ImportStatement = _ "import" _ path:StringLiteral _ {
  pathNode, _ := path.(Node)

  if fspath := strings.TrimSpace(pathNode.ValStr()); fspath == "" {
    return nil, invalid("import statement requires a resolvable path")
  } else {
    return importNode(c, fspath)
  }
} / FailOnBadImport

GenerateExpr = _ "generate" _ '(' _ count:SingleArgument _ ',' _ entity:EntityRef _ ')' _ {
  if count.(Node).Kind != "literal-int" {
    return nil, invalid("`generate` takes a non-zero integer count as its first argument")
  }

  return genNode(c, entity, NodeSet{count.(Node)})
} / FailOnUnterminatedGeneratorArguments / FailOnMissingGenerateArguments

Assignment = name:Identifier _ ASSIGN_OP {
  if name == nil {
    return nil, nil
  }
  return assignNode(c, name)
}

EntityRef = EntityExpr / Identifier

EntityExpr "entity expression" = _ name:Assignment? _ entity:EntityDefinition _ {
  return entityNode(c, name, entity)
} / FailOnMissingRightHandAssignment

EntityDefinition = extends:Identifier? _ '{' _ body:FieldSet? _ '}' {
  return entityDefNode(c, extends, body)
} / FailOnUnterminatedEntity

FieldSet "entity fields" = FailOnUndelimitedFields / first:FieldDecl rest:(_ ',' _ FieldDecl)* (_ ',')? {
  if first == nil {
    return nil, nil
  }

  return delimitedNodeSlice(first, rest), nil
}

FieldDecl = StaticDecl / DynamicDecl / FailOnMissingFieldType

StaticDecl "field declaration" = name:Identifier _ fieldValue:Literal _ {
  if name == nil {
    return nil, nil
  }

  return staticFieldNode(c, name, fieldValue)
}

DynamicDecl "field declaration" = name:Identifier _ fieldType:(Builtin / EntityRef) _ args:Arguments? _ bound:Bound? _ {
  if name == nil || fieldType == nil {
    return nil, nil
  }

  b, _ := bound.(NodeSet)
  return dynamicFieldNode(c, name, fieldType, args, b)
}

Bound = '[' _ body:ArgumentsBody? _ ']' {
  return defaultToEmptySlice(body), nil
} / FailOnUnterminatedBound

Arguments = '(' _ body:ArgumentsBody? _ ')' {
  return defaultToEmptySlice(body), nil
} / FailOnUnterminatedArguments

ArgumentsBody "arguments body" = FailOnUndelimitedArgs / first:SingleArgument rest:(_ ',' _ SingleArgument)* {
  if first == nil {
    return nil, nil
  }

  return delimitedNodeSlice(first, rest), nil
}

Literal = DateTimeLiteral / NumberLiteral / BoolLiteral / StringLiteral / NullLiteral

SingleArgument = Literal / Identifier

Identifier = !ReservedWord [a-z0-9_$]i+ {
  val := string(c.text)

  if strings.Contains(val, "$") {
    return nil, invalid("Illegal identifier %q; identifiers start with a letter or underscore, followed by zero or more letters, underscores, and numbers", val)
  }

  if m, e := regexp.MatchString(`^\d`, val); m || e != nil {
    return nil, invalid("Illegal identifier %q; identifiers start with a letter or underscore, followed by zero or more letters, underscores, and numbers", val)
  }

  return idNode(c, val)
} / FailOnIllegalIdentifier

Builtin "built-in types" = FieldTypes {
  return builtinNode(c, string(c.text))
}

DateTimeLiteral = date:IsoDate localTime:LocalTimePart? {
  return dateLiteralNode(c, date, localTime)
} / FailOnMissingDate

LocalTimePart = ts:TimePart zone:ZonePart? {
  if zone == nil {
    return []string{ts.(string)}, nil
  } else {
    return []string{ts.(string), zone.(string)}, nil
  }
}

IsoDate = DIGIT DIGIT DIGIT DIGIT '-' DIGIT DIGIT '-' DIGIT DIGIT { return string(c.text), nil}
TimePart = 'T'i DIGIT DIGIT ':' DIGIT DIGIT ':' DIGIT DIGIT { return strings.ToUpper(string(c.text)), nil }
ZonePart = 'Z'i { return "Z", nil } / [+-] DIGIT DIGIT ':'? DIGIT DIGIT { return strings.Replace(string(c.text), ":", "", -1), nil }

NumberLiteral = '-'? INT ('.' DIGIT+)? {
  if s := string(c.text); strings.ContainsAny(s, ".") {
    return floatLiteralNode(c, s)
  } else {
    return intLiteralNode(c, s)
  }
} / FailOnOctal

BoolLiteral = BoolToken {
  return boolLiteralNode(c, string(c.text))
}

NullLiteral = NullToken {
  return nullLiteralNode(c)
}

StringLiteral = '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
  return strLiteralNode(c, string(c.text))
}

EscapedChar = [\x00-\x1f"\\]

EscapeSequence = SingleCharEscape / UnicodeEscape

SingleCharEscape = ["\\/bfnrt]

UnicodeEscape = 'u' HEXDIG HEXDIG HEXDIG HEXDIG

ASSIGN_OP = ':'

INT = '0' / NON_ZERO DIGIT*

NON_ZERO = [1-9]

DIGIT = [0-9]

HEXDIG = [0-9a-f]i

ReservedWord = Keyword / FieldTypes / NullToken / BoolToken

Keyword = "import" / "generate"

FieldTypes = "integer" / "decimal" / "string" / "date" / "dict" / "bool"

NullToken = "null"

BoolToken = "true" / "false"

/**
 *  88 88b 88 Yb    dP    db    88     88 8888b.      88""Yb 88   88 88     888888 .dP"Y8
 *  88 88Yb88  Yb  dP    dPYb   88     88  8I  Yb     88__dP 88   88 88     88__   `Ybo."
 *  88 88 Y88   YbdP    dP__Yb  88  .o 88  8I  dY     88"Yb  Y8   8P 88  .o 88""   o.`Y8b
 *  88 88  Y8    YP    dP""""Yb 88ood8 88 8888Y"      88  Yb `YbodP' 88ood8 888888 8bodP'
 */

FailOnBadImport "invalid import statment" = "import" _ [^ \t\r\n]* { return nil, invalid("import statement requires a path") }
FailOnOctal "octal numbers not supported" = "\\0" DIGIT+ { return Node{}, invalid("Octal sequences are not supported") }
FailOnUnterminatedEntity "unterminated entity" = _ Identifier? _ '{' _ FieldSet? _ EOF { return nil, invalid("Unterminated entity expression (missing closing curly brace") }
FailOnUndelimitedFields "missing field delimiter" = FieldDecl (_ "," _) (_ "," _)+ {return nil, invalid("Expected another field declaration")} / FieldDecl (_ FieldDecl)+ { return nil, invalid("Multiple field declarations must be delimited with a comma") }
FailOnUnterminatedBound "unterminated bound" = '[' _ ArgumentsBody? _ (!SingleArgument [^)] / EOF) { return nil, invalid("Unterminated bound list (missing closing square bracket)") }
FailOnUnterminatedArguments "unterminated arguments" = '(' _ ArgumentsBody? _ (!SingleArgument [^)] / EOF) { return nil, invalid("Unterminated argument list (missing closing parenthesis)") }
FailOnUndelimitedArgs "missing argument delimiter" = SingleArgument ((_ / _ [^,})] _) SingleArgument)+ { return nil, invalid("Multiple arguments must be delimited with a comma") }
FailOnIllegalIdentifier "illegal identifier" = ReservedWord { return nil, invalid("Illegal identifier: %q is a reserved word", string(c.text)) }
FailOnMissingDate "timestamps must have date" = LocalTimePart { return Node{}, invalid("Must include ISO-8601 (YYYY-MM-DD) date as part of timestamp") }
FailOnMissingGenerateArguments = _ "generate" _ (EntityRef / '(' _ (EntityRef / SingleArgument) _ ')') _ { return nil, invalid("`generate` statement %q requires arguments `(count, enitty)`", string(c.text)) }
FailOnUnterminatedGeneratorArguments = _ "generate" _ '(' _ ((EntityRef / SingleArgument) (_ ',' _ (EntityRef / SingleArgument))*)? _ [^)] _ { return nil, invalid("`generate` statement %q requires arguments `(count, enitty)`", string(c.text)) }
FailOnMissingFieldType = Identifier { return nil, invalid("Missing field type for field declaration %q", string(c.text)) }
FailOnMissingRightHandAssignment = ass:Assignment {
  if ass == nil { // hehe, I said "ass".
    return nil, nil // bad identifier
  }
  return nil, invalid("Missing right-hand of assignment expression %q", string(c.text))
}

/**
 *  888888 88b 88 8888b.
 *  88__   88Yb88  8I  Yb
 *  88""   88 Y88  8I  dY
 *  888888 88  Y8 8888Y"
 */

Comment = '#' (!EOL .)* EOL

BLANK "whitespace" = [ \t\r\n]

_ "ignored" = (BLANK / Comment)*

EOL = [\n\r]

EOF = !.
